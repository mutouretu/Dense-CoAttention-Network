import argparse
from constants import WORK_DIR,DATA20,DATA10,GLOVE_FILE,IMAGE_DIR,CNN_TYPE

def get_train_config():
    parser = argparse.ArgumentParser()

    arch = parser.add_argument_group("Model Architecture")
    # arch.add_argument("--arch", default="DCNWithRCNN")
    arch.add_argument("--arch", default="DCN")
    arch.add_argument("--num-layers", type=int, default=2)
    arch.add_argument("--cnn-name", type=str, default=CNN_TYPE)
    arch.add_argument("--img-size", type=int, default=2048)
    arch.add_argument("--ques-size", type=int, default=1024)
    arch.add_argument("--num-img-attn", type=int, default=4)
    arch.add_argument("--num-dense-attn", type=int, default=4)
    arch.add_argument("--num-predict-attn", type=int, default=4)
    arch.add_argument("--num-none", type=int, default=3)
    arch.add_argument("--num-seq", type=int, default=5)
    arch.add_argument("--word-vectors", type=str, default=WORK_DIR+GLOVE_FILE)
    arch.add_argument("--droprnn", type=float, default=0.1)
    arch.add_argument("--dropout", type=float, default=0.3)

    train = parser.add_argument_group("Training Setup")
    train.add_argument("--num-epoch", type=int, default=25)
    train.add_argument("--num-iter", type=int, default=-1)
    train.add_argument("--patience", type=int, default=5)
    train.add_argument("--trainval", type=int, default=0)
    train.add_argument("--data-path", type=str, default=WORK_DIR)
    train.add_argument("--data-name", type=str, default="cocotrain")
    train.add_argument("--img-path", type=str, default=IMAGE_DIR)
    train.add_argument("--img-type", type=str, default="resnet")

    optim = parser.add_argument_group("Optimizer Config")
    optim.add_argument("--max-grad-norm", type=float, default=-1)
    optim.add_argument("--lr", type=float, nargs="+", default=[0.001])
    optim.add_argument("--lr-shrink", type=float, default=0.5)
    optim.add_argument("--warmup-init-lr", type=float, default=0.001)
    optim.add_argument("--warmup-updates", type=float, default=0)
    optim.add_argument("--step-size", type=int, default=7)
    optim.add_argument("--weight-decay", type=float, default=0.0001)
    optim.add_argument("--adam-betas", default="(0.9, 0.999)")
    optim.add_argument("--adam-eps", type=float, default=1e-08)
    optim.add_argument("--no-record", action="store_false", dest="record", default=True)

    evaluate = parser.add_argument_group("Evaluation Mode")
    evaluate.add_argument("--ann-file", default=DATA20+'v2_mscoco_val2014_annotations.json')
    evaluate.add_argument("--ques-file",
                          default=DATA20+'v2_OpenEnded_mscoco_val2014_questions.json')
    evaluate.add_argument("--result-file", default=WORK_DIR+'result')

    general = parser.add_argument_group("General Setup")
    general.add_argument("--resume", default="DCN0_epoch11.pth.tar")
    general.add_argument("--no-overwrite", action="store_false", dest="overwrite", default=False)
    general.add_argument("--use-thread", action="store_true")
    general.add_argument("--use-tensorboard", action="store_true")
    general.add_argument("--size-scale", default=(448, 448))
    general.add_argument("--directory", type=str, default=WORK_DIR+"model")
    general.add_argument("--model", type=str, default="DCN0")
    general.add_argument("--gpus", type=int, nargs="+", default=[1])
    general.add_argument("--log-interval", type=int, default=100)
    general.add_argument("--save-freq", type=int, default=1)
    general.add_argument("--seed", type=int, default=12345)
    general.add_argument("--num-workers", type=int, default=4)
    general.add_argument("--batch-size", type=int, default=15)

    return parser.parse_args()


def get_answer_config():
    parser = argparse.ArgumentParser()

    arch = parser.add_argument_group("Model Architecture")
    arch.add_argument("--arch", default="DCN")
    arch.add_argument("--num-layers", type=int, default=2)
    arch.add_argument("--cnn-name", type=str, default="resnet152")
    arch.add_argument("--img-size", type=int, default=2048)
    arch.add_argument("--ques-size", type=int, default=1024)
    arch.add_argument("--num-img-attn", type=int, default=4)
    arch.add_argument("--num-dense-attn", type=int, default=4)
    arch.add_argument("--num-predict-attn", type=int, default=4)
    arch.add_argument("--num-none", type=int, default=3)
    arch.add_argument("--num-seq", type=int, default=5)
    arch.add_argument("--word-vectors", type=str, default=WORK_DIR + WORK_DIR+GLOVE_FILE)
    arch.add_argument("--droprnn", type=float, default=0.1)
    arch.add_argument("--dropout", type=float, default=0.3)

    general = parser.add_argument_group("General Setup")
    general.add_argument("--resume", default="DCN0_best.pth.tar")
    general.add_argument("--use-thread", action="store_true")
    general.add_argument("--size-scale", default=(448, 448))
    general.add_argument("--directory", type=str, default=WORK_DIR + "model")
    general.add_argument("--model", type=str, default="DCN0")
    general.add_argument("--gpus", type=int, nargs="+", default=[1])
    general.add_argument("--log-interval", type=int, default=100)
    general.add_argument("--seed", type=int, default=12345)
    general.add_argument("--num-workers", type=int, default=4)
    general.add_argument("--batch-size", type=int, default=400)

    answer = parser.add_argument_group("Answer Setup")
    answer.add_argument("--data-path", type=str, default=WORK_DIR)
    answer.add_argument("--data-name", type=str, default="cocotrain")
    answer.add_argument("--img-path", type=str, default=IMAGE_DIR)
    answer.add_argument("--img-type", type=str, default="rcnn")
    answer.add_argument("--save-file", type=str, default="")
    answer.add_argument("--ensemble", action="store_true")

    return parser.parse_args()
